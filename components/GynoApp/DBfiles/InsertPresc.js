/* eslint-disable prettier/prettier */
import axios from 'axios';

const InsertPresc = async Presc_data => {
  // console.log('Inside Insert Presc - DOCNMC- ', Presc_data.docNmc);
  if (Presc_data.form == 'PRSC') {
    console.log('Inside PRSC');

    const {
      docNmc,
      clinicId,
      patName,
      patAge,
      patPhone,
      patGender,
      patHeight,
      vitalsTable,
      presCompl,
      medHistory,
      phyExam,
      provDiag,
      investRec,
      medicine1,
      favInvest,
      favAdvise,
      followDate,
      patId,
      form,
      presNotes,
      weight,
      bp,
      pEdema,
      pallor,
      sPS,
      pulse,
    } = Presc_data;

    try {
      const response = await axios.post(
        'http://54.66.15.177:3000/setPresc', // Replace with your EC2 instance IP
        {
          patient_id: patId,
          doc_nmc: docNmc,
          clinic_id: clinicId,
          pat_name: patName,
          pat_age: patAge,
          pat_phone: patPhone,
          pat_gender: patGender,
          pres_compl: presCompl,
          med_history: medHistory,
          pres_notes: presNotes,
          invest_rec: investRec,
          phy_exam: phyExam,
          vitals: vitalsTable,
          height: patHeight,
          weight: weight,
          blood_press: bp,
          pulse: pulse,
          spot_bs: sPS,
          pallor: pallor,
          pedal_ed: pEdema,
          prov_diag: provDiag,
          medicine: medicine1,
          fav_invest: favInvest,
          fav_advise: favAdvise,
          follow_up: followDate,
          form: form,
        },
      );

      console.log('Response:', response.data);
    } catch (error) {
      console.error('Error:', error);
    }
  } else if (Presc_data.form == 'ANC') {
    // console.log('Inside Insert presc ANC 1', Presc_data);

    const {
      patId,
      docNmc,
      clinicId,
      patName,
      patAge,
      patPhone,
      patGender,
      patHeight,
      vitalsTable,
      presCompl,
      medHistory,
      phyExam,
      provDiag,
      investRec,
      medicine1,
      favInvest,
      favAdvise,
      followDate,
      form,
      presNotes,
      weight,
      bp,
      pEdema,
      pallor,
      sPS,
      pulse,
      gravida,
      birth_year,
      parity,
      mode_birth,
      outcome,
      baby,
      birth_wt,
      comments,
      usgDate,
      pog,
      usgSum,
      placenta,
      liquor,
      anteMDate,
      antePog,
      anteWt,
      antePE,
      antePallor,
      anteBP,
      anteOE,
      bg,
      rubella,
      husbBg,
      hplc,
      ict1,
      ict2,
      ict3,
      hiv,
      hcv,
      hbsag,
      antiD,
      vdrl,
      hb1,
      hb2,
      hb3,
      urine,
      td,
      gtt1,
      gtt2,
      gtt3,
      tDaP,
      fluvac,
      tsh1,
      tsh2,
      tsh3,
      dualS,
      quadS,
      nipt,
      obs_hist,
      vaccination,
      otherInv,
      lmp,
      ict1D,
      ict2D,
      ict3D,
      hb1D,
      hb2D,
      hb3D,
      gtt1D,
      gtt2D,
      gtt3D,
      tsh1D,
      tsh2D,
      tsh3D,
    } = Presc_data;

    console.log('Inside Insert presc ANC  2', Presc_data);

    try {
      console.log('Inside try block');

      const response = await axios.post(
        'http://54.66.15.177:3000/setAnc', // Replace with your EC2 instance IP
        {
          patient_id: patId,
          doc_nmc: docNmc,
          clinic_id: clinicId,
          pat_name: patName,
          pat_age: patAge,
          pat_phone: patPhone,
          pat_gender: patGender,
          pres_compl: presCompl,
          med_history: medHistory,
          pres_notes: presNotes,
          invest_rec: investRec,
          phy_exam: phyExam,
          vitals: vitalsTable,
          height: patHeight,
          weight: weight,
          blood_press: bp,
          pulse: pulse,
          spot_bs: sPS,
          pallor: pallor,
          pedal_ed: pEdema,
          prov_diag: provDiag,
          medicine: medicine1,
          fav_invest: favInvest,
          fav_advise: favAdvise,
          follow_up: followDate,
          form: form,
          lmp_date: lmp.toISOString().split('T')[0],
          obs_hist: obs_hist,
          gravida,
          birth_year,
          parity,
          mode_birth,
          outcome,
          baby,
          birth_wt,
          comments,
          usg_date: usgDate.toISOString().split('T')[0],
          pog,
          usg_summary: usgSum,
          placenta,
          liquor,
          antem_date: anteMDate.toISOString().split('T')[0],
          antem_pog: antePog,
          antem_wt: anteWt,
          antem_bp: anteBP,
          antem_pallor: antePallor,
          antem_ped: antePE,
          antem_oe: anteOE,
          bg,
          rubella,
          antem_h_bg: husbBg,
          ict_1visit: ict1,
          ict_2visit: ict2,
          ict_3visit: ict3,
          ict_1date: ict1D,
          ict_2date: ict2D,
          ict_3date: ict3D,
          anti_D: antiD,
          hplc,
          hiv,
          hbsag,
          vdrl,
          hcv,
          urine,
          vaccination: vaccination.toISOString().split('T')[0],
          td: td.toISOString().split('T')[0],
          tdap: tDaP.toISOString().split('T')[0],
          fluvac: fluvac.toISOString().split('T')[0],
          dual_screen: dualS,
          quad_screen: quadS,
          nipt,
          hb_1: hb1,
          hb_2: hb2,
          hb_3: hb3,
          gtt_1: gtt1,
          gtt_2: gtt2,
          gtt_3: gtt3,
          tsh_1: tsh1,
          tsh_2: tsh2,
          tsh_3: tsh3,
          hb_1date: hb1D,
          hb_2date: hb2D,
          hb_3date: hb3D,
          gtt_1date: gtt1D,
          gtt_2date: gtt2D,
          gtt_3date: gtt3D,
          tsh_1date: tsh1D,
          tsh_2date: tsh2D,
          tsh_3date: tsh3D,
          other_invest: otherInv,
        },
      );

      console.log('Response:', response.data);
    } catch (error) {
      console.error('Error:', error);
    }
  } else if (Presc_data.form == 'SURG') {
    const {
      docNmc,
      clinicId,
      patName,
      patAge,
      patPhone,
      patGender,
      patHeight,
      vitalsTable,
      presCompl,
      medHistory,
      phyExam,
      provDiag,
      investRec,
      medicine1,
      favInvest,
      favAdvise,
      followDate,
      patId,
      form,
      presNotes,
      weight,
      bp,
      pEdema,
      pallor,
      sPS,
      pulse,
      surgPro,
      surgFind,
    } = Presc_data;

    try {
      const response = await axios.post(
        'http://54.66.15.177:3000/setSurg', // Replace with your EC2 instance IP
        {
          patient_id: patId,
          doc_nmc: docNmc,
          clinic_id: clinicId,
          pat_name: patName,
          pat_age: patAge,
          pat_phone: patPhone,
          pat_gender: patGender,
          pres_compl: presCompl,
          med_history: medHistory,
          pres_notes: presNotes,
          invest_rec: investRec,
          phy_exam: phyExam,
          vitals: vitalsTable,
          height: patHeight,
          weight: weight,
          blood_press: bp,
          pulse: pulse,
          spot_bs: sPS,
          pallor: pallor,
          pedal_ed: pEdema,
          prov_diag: provDiag,
          medicine: medicine1,
          fav_invest: favInvest,
          fav_advise: favAdvise,
          follow_up: followDate,
          form: form,
          surg_proc: surgPro,
          surg_find: surgFind,
        },
      );

      console.log('Response:', response.data);
    } catch (error) {
      console.error('Error:', error);
    }
  } else {
    const {
      docNmc,
      clinicId,
      patName,
      patAge,
      patPhone,
      patGender,
      patHeight,
      vitalsTable,
      presCompl,
      medHistory,
      phyExam,
      provDiag,
      investRec,
      medicine1,
      favInvest,
      favAdvise,
      followDate,
      patId,
      form,
      presNotes,
      weight,
      bp,
      pEdema,
      pallor,
      sPS,
      pulse,
      femPDate,
      fUDate,
      fEBDate,
      fHDate,
      hystDate,
      lapDate,
      husbDate,
      sDate,
      hUsgDate,
      hDfiDate,
      kDate,
      fHb,
      fBG,
      hBG,
      fBS,
      hBS,
      fHbsAg,
      hHBsAg,
      fHIV,
      hHIV,
      fVDRL,
      hVDRL,
      fLH,
      fFSH,
      fTSH,
      fE2,
      fAMH,
      fPro,
      fUsg,
      fEB,
      fHsg,
      hyst,
      lap,
      semen,
      hUsg,
      hDfi,
      karyo,
      inferNotes,
      patInvNotes,
      husbInvNotes,
    } = Presc_data;

    try {
      const response = await axios.post(
        'http://54.66.15.177:3000/setInf', // Replace with your EC2 instance IP
        {
          patient_id: patId,
          doc_nmc: docNmc,
          clinic_id: clinicId,
          pat_name: patName,
          pat_age: patAge,
          pat_phone: patPhone,
          pat_gender: patGender,
          pres_compl: presCompl,
          med_history: medHistory,
          pres_notes: presNotes,
          invest_rec: investRec,
          phy_exam: phyExam,
          vitals: vitalsTable,
          height: patHeight,
          weight: weight,
          blood_press: bp,
          pulse: pulse,
          spot_bs: sPS,
          pallor: pallor,
          pedal_ed: pEdema,
          prov_diag: provDiag,
          medicine: medicine1,
          fav_invest: favInvest,
          fav_advise: favAdvise,
          follow_up: followDate,
          form: form,
          infer_notes: inferNotes,
          patient_invest: patInvNotes,
          femp_date: femPDate,
          fem_u_date: fUDate,
          fem_eb_date: fEBDate,
          fem_h_date: fHDate,
          hyst_date: hystDate,
          lap_date: lapDate,
          fem_hb: fHb,
          fem_bg: fBG,
          fem_bs: fBS,
          fem_hiv: fHIV,
          fem_hbsag: fHbsAg,
          fem_vdrl: fVDRL,
          fem_lh: fLH,
          fem_fsh: fFSH,
          fem_tsh: fTSH,
          fem_e2: fE2,
          fem_amh: fAMH,
          fem_prolac: fPro,
          fem_usg: fUsg,
          fem_eb: fEB,
          fem_hsg: fHsg,
          fem_hystero: hyst,
          fem_lapro: lap,
          sdate: sDate,
          kdate: kDate,
          husb_date: husbDate,
          h_usg_date: hUsgDate,
          hdfi_date: hDfiDate,
          husb_Invest: husbInvNotes,
          husb_bg: hBG,
          husb_bs: hBS,
          husb_hiv: hHIV,
          husb_hbsag: hHBsAg,
          husb_vdrl: hVDRL,
          semen,
          husb_usg: hUsg,
          husb_dfi: hDfi,
          husb_karyo: karyo,
        },
      );
      console.log('Response:', response.data);
    } catch (error) {
      console.error('Error:', error);
    }
  }
};

export default InsertPresc;
